

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.*;
        
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.conf.*;
import org.apache.hadoop.io.*;
import org.apache.hadoop.mapreduce.*;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.input.TextInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.mapreduce.lib.output.TextOutputFormat;
        
public class KMeans {
	
	public static ArrayList<ArrayList<Double>> FileToListOfLists(String FileName){
		BufferedReader br = null;
		ArrayList<ArrayList<Double>> ll = null;
		try { 
			String sCurrentLine;
			br = new BufferedReader(new FileReader(FileName));
			ll = new ArrayList<ArrayList<Double>>(); 
			while ((sCurrentLine = br.readLine()) != null) {
				//System.out.println("This line is: " + sCurrentLine);
        StringTokenizer tokenizer = new StringTokenizer(sCurrentLine);
    		ArrayList<Double> a = new ArrayList<Double>();
        while (tokenizer.hasMoreTokens()){
        	a.add(Double.parseDouble(tokenizer.nextToken()));
        }
        ll.add(a);
        //System.out.println(" a is: " + a.toString());
        //System.out.println("dim a is: " + a.size());
			} 
			br.close();
			return ll;
		} catch (IOException e) {
			e.printStackTrace();
		}
		return ll;
	}
	
  public static double getDistance(ArrayList<Double> a, ArrayList<Double> b){
  	double Dist=0;
  	for (int i=0; i< a.size();i++){
  		Dist = Dist + Math.pow((a.get(i)-b.get(i)),2);
  	}
  	return Dist;
  }

    public static class Map1 extends Mapper<LongWritable, Text, Text, IntWritable> {
      private final static IntWritable one = new IntWritable(1);
      private Text word = new Text();
      
      public void map(LongWritable key, Text value, Context context) throws IOException, InterruptedException {
        
        Configuration conf = context.getConfiguration();
        String CentFile=conf.get("centroid_file");
        //System.out.println(CentFile);
        ArrayList<ArrayList<Double>> Centroids = FileToListOfLists(CentFile);
        //System.out.println("1st centroid: "  + Centroids.get(0));
      	
      	
      	String line = value.toString();
        StringTokenizer tokenizer = new StringTokenizer(line);

    		ArrayList<Double> pt = new ArrayList<Double>();

        
    		while (tokenizer.hasMoreTokens()){
        	pt.add(Double.parseDouble(tokenizer.nextToken()));
        }

        double mindist=getDistance(pt, Centroids.get(0)); //initialize min dist w/ ref to 1st centroid
        String centAssigned = Centroids.get(0).toString();
        
    		for (int i=1; i< Centroids.size();i++){
    			if (getDistance(pt,Centroids.get(i)) < mindist){
    				centAssigned = Centroids.get(i).toString();
    			}
    		}
    		
    		System.out.println("Point: " + pt);
    		System.out.println("Centroid: " + centAssigned);
    		context.write(new Text(pt.toString()), new IntWritable(1));
      }
    }
 
      public static class Reduce1 extends Reducer<Text, IntWritable, Text, IntWritable> {

        public void reduce(Text key, Iterable<IntWritable> values, Context context) 
          throws IOException, InterruptedException {
            int sum = 0;
            for (IntWritable val : values) {
                sum += val.get();
            }
            context.write(key, new IntWritable(sum));
        }
      }
        
 public static void main(String[] args) throws Exception {
    Configuration conf = new Configuration();
    
    
    String InputFile = ("/home/cs246/Desktop/kmeansdata/data/");
    String OutputFile = ("/home/cs246/Desktop/output0");
    String CentFile = ("/home/cs246/Desktop/kmeansdata/c1.txt");
    
    conf.set("centroid_file", CentFile);

    
    for (int i=0;i<2;i++) {
      Job job = new Job(conf, "KMeans");
      job.setJarByClass(KMeans.class);
      job.setOutputKeyClass(Text.class);
      job.setOutputValueClass(IntWritable.class);
          
      job.setMapperClass(Map1.class);
      job.setReducerClass(Reduce1.class);
          
      job.setInputFormatClass(TextInputFormat.class);
      job.setOutputFormatClass(TextOutputFormat.class);
      
      OutputFile=OutputFile + String.valueOf(i);
      
      FileInputFormat.addInputPath(job, new Path(InputFile));
      FileOutputFormat.setOutputPath(job, new Path(OutputFile));
          
      job.waitForCompletion(true);      
    }

 }
        
}
